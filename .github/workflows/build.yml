name: DoraCore Kernel Build

on:
  workflow_dispatch:
    inputs:
      KERNEL_BRANCH:
        description: 'DoraCore Branch'
        required: true
        default: 'Rebase'
        type: choice
        options:
        - test
        - Rebase
        - Linux-5.10.y-Android-12
      KERNEL_GIT:
        description: 'Kernel Source Code'
        required: true
        default: 'https://github.com/xiaomi-sm8450-mondrian/android_kernel_xiaomi_common.git'
      BUILD_DEVICE:
        description: 'Device Target'
        required: true
        default: 'mondrian'
        type: choice
        options:
        - all
        - mayfly
        - cupid
        - unicorn
        - zeus
        - diting
        - marble
        - mondrian
        - thor
        - zizhan
        - ziyi
        - gki
      MANIFEST_GIT:
        description: 'Kernel Manifest Git'
        required: true
        default: 'https://github.com/xiaomi-sm8450-mondrian/android_kernel_xiaomi_common.git'
      CLANG_PREBUILT:
        description: 'Custom Clang Prebuilt Git'
        required: true
        default: 'https://gitlab.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r547379.git'
      CLANG_BRANCH:
        description: 'Custom Clang Prebuilt Branch'
        required: true
        default: '15.0'
      BUILD_TARGET:
        description: 'Specify your Build Target'
        required: true
        default: 'KSU'
        type: choice
        options:
        - NonKSU
        - KSU
        - Both
      ANYKERNEL_GIT:
        description: 'AnyKernel3 Git'
        required: true
        default: 'https://github.com/keosh1/Anykernel3.git'
      ANYKERNEL_BRANCH:
        description: 'AnyKernel3 Branch'
        required: true
        default: 'master'
      RELEASE:
        description: 'Status Release'
        required: true
        default: 'prerelease'
        type: choice
        options:
        - draft
        - prerelease
        - release

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        shell: bash
        env:
          BUILD_DEVICE: ${{ github.event.inputs.BUILD_DEVICE }}
        run: |
          if [ "$BUILD_DEVICE" = "mayfly" ]; then
            matrix='["mayfly"]'
          elif [ "$BUILD_DEVICE" = "cupid" ]; then
            matrix='["cupid"]'
          elif [ "$BUILD_DEVICE" = "zeus" ]; then
            matrix='["zeus"]'
          elif [ "$BUILD_DEVICE" = "unicorn" ]; then
            matrix='["unicorn"]'
          elif [ "$BUILD_DEVICE" = "diting" ]; then
            matrix='["diting"]'
          elif [ "$BUILD_DEVICE" = "marble" ]; then
            matrix='["marble"]'
          elif [ "$BUILD_DEVICE" = "mondrian" ]; then
            matrix='["mondrian"]'
          elif [ "$BUILD_DEVICE" = "thor" ]; then
            matrix='["thor"]'
          elif [ "$BUILD_DEVICE" = "zizhan" ]; then
            matrix='["zizhan"]'
          elif [ "$BUILD_DEVICE" = "ziyi" ]; then
            matrix='["ziyi"]'
          elif [ "$BUILD_DEVICE" = "gki" ]; then
            matrix='["gki"]'
          elif [ "$BUILD_DEVICE" = "all" ]; then
            matrix='["mayfly", "cupid", "unicorn", "zeus", "diting", "marble", "mondrian", "thor", "zizhan", "ziyi", "gki"]'
          fi

          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  create_release:
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    permissions:
      contents: write
      discussions: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set tag as timestamp
        id: set-tag
        run: echo "tag=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set-tag.outputs.tag }}
          name: DoraCore Build ${{ steps.set-tag.outputs.tag }}
          draft: ${{ github.event.inputs.RELEASE == 'draft' }}
          prerelease: ${{ github.event.inputs.RELEASE == 'prerelease' }}
          body: |
            Build: DoraCore Kernel For GKI Linux 5.10.y
            Linux: Linux 5.10.y
            Type: GKI
            Developer: @dopaemon
            Credits: @ArianK16a, @bachnxuan, @Gelbpunkt, @ztc1997, @pzqqt, @KernelToast, @Arter97, @ramabondanp, @Gosth15, @Flopster101, @bheatleyyy, ...
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: [create_release, set-matrix]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        device: ${{ fromJson(needs.set-matrix.outputs.matrix) }}

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    permissions:
      contents: write
      discussions: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Environment
        run: |
          echo "BUILD_DATE=$(TZ=Asia/Ho_Chi_Minh date +'%Y-%m%d-%H%M')" >> $GITHUB_ENV
          cd $GITHUB_WORKSPACE
          sudo apt-get update
          sudo apt-get install -y git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler rename libelf-dev dwarves wget openjdk-8-jdk
          sudo wget -O /usr/bin/repo http://commondatastorage.googleapis.com/git-repo-downloads/repo
          sudo chmod +x /usr/bin/repo
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          mkdir -p $GITHUB_WORKSPACE/android-kernel && cd $GITHUB_WORKSPACE/android-kernel
          repo init --depth=1 --u ${{ github.event.inputs.KERNEL_GIT }} -b manifest
          repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags
          git clone -b build --single-branch https://github.com/dopaemon/android_kernel_xiaomi_common.git build
          rm -rf .git .github .repo common
          git clone -b ${{ github.event.inputs.CLANG_BRANCH }} --depth=1 --single-branch ${{ github.event.inputs.CLANG_PREBUILT }} prebuilts-master/clang/host/linux-x86/clang-r416183b
          rm -rf ./build/_setup_env.sh
          wget -O ./build/_setup_env.sh https://raw.githubusercontent.com/dopaemon/android_kernel_xiaomi_common/refs/heads/master/.github/scripts/_setup_env.sh
          chmod +x ./build/_setup_env.sh
          git clone -b ${{ github.event.inputs.KERNEL_BRANCH }} --recurse-submodules -j$(nproc --all) --depth=1 --single-branch ${{ github.event.inputs.KERNEL_GIT }} ./common
          git clone -b lineage-22.2 --single-branch --depth=1 https://github.com/cupid-development/android_kernel_xiaomi_sm8450-modules sm8450-modules
          git clone -b lineage-22.2 --single-branch --depth=1 https://github.com/cupid-development/android_kernel_xiaomi_sm8450-devicetrees sm8450-devicetrees
          git clone -b ${{ github.event.inputs.ANYKERNEL_BRANCH }} --depth=1 --single-branch ${{ github.event.inputs.ANYKERNEL_GIT }} ./AnyKernel3
          rm -rf ./AnyKernel3/.git

      - name: Build Selected Devices KSU
        if: github.event.inputs.BUILD_TARGET == 'KSU' || github.event.inputs.BUILD_TARGET == 'Both'
        run: |
          set -e
          DEVICE="${{ matrix.device }}"

          cd $GITHUB_WORKSPACE/android-kernel
          cd ./common/
          git reset --hard HEAD
          rm -rf $GITHUB_WORKSPACE/android-kernel/out/android12-5.10

          if [ "$DEVICE" != "gki" ]; then
             cat arch/arm64/configs/vendor/waipio_GKI.config >> arch/arm64/configs/gki_defconfig
             cat arch/arm64/configs/vendor/xiaomi_GKI.config >> arch/arm64/configs/gki_defconfig
             cat arch/arm64/configs/vendor/"$DEVICE"_GKI.config >> arch/arm64/configs/gki_defconfig
             cat arch/arm64/configs/vendor/debugfs.config >> arch/arm64/configs/gki_defconfig
          fi

          echo "CONFIG_KSU=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_DEBUG=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=n" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=n" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=n" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=n" >> arch/arm64/configs/gki_defconfig

          cd ../
          CC='ccache' LTO=full BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh -j$(nproc --all)

          # Make flashable ZIP
          ZIP_NAME="DoraCore-${DEVICE}-KSU-5.10-A12-${BUILD_DATE}.zip"
          cd $GITHUB_WORKSPACE/android-kernel/AnyKernel3
          cp -f $GITHUB_WORKSPACE/android-kernel/out/android12-5.10/dist/Image ./Image
          zip -r9 "$ZIP_NAME" *
          mv "$ZIP_NAME" $GITHUB_WORKSPACE/

      - name: Build Selected Devices NonKSU
        if: github.event.inputs.BUILD_TARGET == 'NonKSU' || github.event.inputs.BUILD_TARGET == 'Both'
        run: |
          set -e
          DEVICE="${{ matrix.device }}"

          cd $GITHUB_WORKSPACE/android-kernel
          cd ./common/
          git reset --hard HEAD
          rm -rf $GITHUB_WORKSPACE/android-kernel/out/android12-5.10
          echo "CONFIG_KSU=n" >> arch/arm64/configs/gki_defconfig

          if [ "$DEVICE" != "gki" ]; then
             cat arch/arm64/configs/vendor/waipio_GKI.config >> arch/arm64/configs/gki_defconfig
             cat arch/arm64/configs/vendor/xiaomi_GKI.config >> arch/arm64/configs/gki_defconfig
             cat arch/arm64/configs/vendor/"$DEVICE"_GKI.config >> arch/arm64/configs/gki_defconfig
             cat arch/arm64/configs/vendor/debugfs.config >> arch/arm64/configs/gki_defconfig
          fi

          cd ../
          CC='ccache' LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh -j$(nproc --all)

          # Make flashable ZIP
          ZIP_NAME="DoraCore-${DEVICE}-NonKSU-5.10-A12-${BUILD_DATE}.zip"
          cd $GITHUB_WORKSPACE/android-kernel/AnyKernel3
          cp -f $GITHUB_WORKSPACE/android-kernel/out/android12-5.10/dist/Image ./Image
          zip -r9 "$ZIP_NAME" *
          mv "$ZIP_NAME" $GITHUB_WORKSPACE/

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create_release.outputs.tag }}
          files: DoraCore*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
